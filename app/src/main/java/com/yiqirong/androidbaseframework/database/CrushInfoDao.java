package com.yiqirong.androidbaseframework.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CRUSH_INFO".
*/
public class CrushInfoDao extends AbstractDao<CrushInfo, Long> {

    public static final String TABLENAME = "CRUSH_INFO";

    /**
     * Properties of entity CrushInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Time = new Property(2, String.class, "time", false, "TIME");
        public final static Property Version_code = new Property(3, String.class, "version_code", false, "VERSION_CODE");
        public final static Property User_name = new Property(4, String.class, "user_name", false, "USER_NAME");
        public final static Property Phone_model = new Property(5, String.class, "phone_model", false, "PHONE_MODEL");
        public final static Property System_version = new Property(6, String.class, "system_version", false, "SYSTEM_VERSION");
        public final static Property Sdk_version = new Property(7, String.class, "sdk_version", false, "SDK_VERSION");
        public final static Property Content = new Property(8, String.class, "content", false, "CONTENT");
        public final static Property Title = new Property(9, String.class, "title", false, "TITLE");
    }


    public CrushInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CrushInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CRUSH_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"TIME\" TEXT," + // 2: time
                "\"VERSION_CODE\" TEXT," + // 3: version_code
                "\"USER_NAME\" TEXT," + // 4: user_name
                "\"PHONE_MODEL\" TEXT," + // 5: phone_model
                "\"SYSTEM_VERSION\" TEXT," + // 6: system_version
                "\"SDK_VERSION\" TEXT," + // 7: sdk_version
                "\"CONTENT\" TEXT," + // 8: content
                "\"TITLE\" TEXT);"); // 9: title
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CRUSH_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CrushInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String version_code = entity.getVersion_code();
        if (version_code != null) {
            stmt.bindString(4, version_code);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(5, user_name);
        }
 
        String phone_model = entity.getPhone_model();
        if (phone_model != null) {
            stmt.bindString(6, phone_model);
        }
 
        String system_version = entity.getSystem_version();
        if (system_version != null) {
            stmt.bindString(7, system_version);
        }
 
        String sdk_version = entity.getSdk_version();
        if (sdk_version != null) {
            stmt.bindString(8, sdk_version);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CrushInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
 
        String version_code = entity.getVersion_code();
        if (version_code != null) {
            stmt.bindString(4, version_code);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(5, user_name);
        }
 
        String phone_model = entity.getPhone_model();
        if (phone_model != null) {
            stmt.bindString(6, phone_model);
        }
 
        String system_version = entity.getSystem_version();
        if (system_version != null) {
            stmt.bindString(7, system_version);
        }
 
        String sdk_version = entity.getSdk_version();
        if (sdk_version != null) {
            stmt.bindString(8, sdk_version);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(9, content);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(10, title);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CrushInfo readEntity(Cursor cursor, int offset) {
        CrushInfo entity = new CrushInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // version_code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone_model
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // system_version
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sdk_version
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // content
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // title
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CrushInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVersion_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone_model(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSystem_version(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSdk_version(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTitle(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CrushInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CrushInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CrushInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
